<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>翻译 on 我的碎碎念</title>
    <link>https://blog.crazykids.tech/zh/tags/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on 我的碎碎念</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 24 Jul 2025 22:00:54 +0800</lastBuildDate><atom:link href="https://blog.crazykids.tech/zh/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Context Engineering：为 Prompt 注入工程纪律</title>
      <link>https://blog.crazykids.tech/zh/posts/context-engineering-bringing-engineering/</link>
      <pubDate>Thu, 24 Jul 2025 22:00:54 +0800</pubDate>
      
      <guid>https://blog.crazykids.tech/zh/posts/context-engineering-bringing-engineering/</guid>
      <description>一篇关于 AI Prompt 信息架构的实用指南 原文：Context Engineering: Bringing Engineering Discipline to Prompts TL;DR: “Context Engineering”（上下文工程）是指为 AI（如 LLM）提供成功完成任务所需的所有信息和工具——而不仅仅是一段措辞巧妙的 prompt。它是 “Prompt Engineering” 的演进，体现了一种更</description>
    </item>
    
    <item>
      <title>人们如何使用 Claude 来获得支持、建议和陪伴</title>
      <link>https://blog.crazykids.tech/zh/posts/how-people-use-claude-for-support-advice-and-companionship/</link>
      <pubDate>Mon, 30 Jun 2025 16:46:38 +0800</pubDate>
      
      <guid>https://blog.crazykids.tech/zh/posts/how-people-use-claude-for-support-advice-and-companionship/</guid>
      <description>原文：How People Use Claude for Support, Advice, and Companionship 我们花费大量时间研究 Claude 的智商（IQ）——它在编码、推理、通用知识等测试中的能力。但它的情商（EQ）又如何呢？也就是说，Claude 的情感智能表现如何？ IQ/EQ 的问题带有些许戏谑，但它引出了一个严肃的议题。人们越来越多地将 AI 模型用作随叫随到的教练、顾问、咨询师</description>
    </item>
    
    <item>
      <title>苦涩的教训</title>
      <link>https://blog.crazykids.tech/zh/posts/the-bitter-lesson/</link>
      <pubDate>Mon, 30 Jun 2025 16:06:44 +0800</pubDate>
      
      <guid>https://blog.crazykids.tech/zh/posts/the-bitter-lesson/</guid>
      <description>原文：The Bitter Lesson 《苦涩的教训》是一篇非常出色但被广泛误解的文章。这篇文章的重点是，随着时间的推移，那些能够受益于计算能力扩展的方法，将最终胜过那些不能的方法。 这篇文章的观点不是： 我们永远不应该融合人类知识。 我们所需要的仅仅是深度学习和规模化（实际上，作者 Rich Sutton 对深度学习持相对怀疑的</description>
    </item>
    
  </channel>
</rss>
