[{"content":"git 仓库迁移，一般分为两种情况，从仓库 A 迁移到仓库 B 和从本地直接上传到仓库 B。\n从仓库 A 迁移到仓库 B 这种方式比较常见，也有很多 web 端直接支持镜像的方式，但批量的迁移还是要使用命令的，如下：\n$ git clone --bare http://a.com/crazykids.git $ git push --mirror http://b.com/crazykids.git 从本地直接上传到仓库 B 有的时候需要将本地仓库直接全部 push 到仓库 B，比如仓库 A 真的的挂了，或者你有多仓库备份的习惯。一般 push 命令只能将当前 branch 或者已经 checkout 出来的分支 push 的远端。\n增加仓库 B 地址 $ git remote add B http://b.com/crazykids.git 方式1 checkout 所有分支，再push到远端\n$ git fetch origin $ git branch -r | grep origin | grep -v HEAD|while read rb;do lb=$(echo ${rb}|cut -d/ -f 2-);git checkout -b $lb $rb;done $ git branch -r | grep origin | grep -v HEAD|while read rb;do lb=$(echo ${rb}|cut -d/ -f 2-);git push -f B $lb;done $ git push --tags 不但命令麻烦，如果遇到分支差异比较大的，还经常出现问题。\n方式2 $ git fetch origin $ git push B \u0026#39;refs/remotes/origin/*\u0026#39;:\u0026#39;refs/heads/*\u0026#39; \u0026#39;refs/tags/*\u0026#39;:\u0026#39;refs/tags/*\u0026#39; ","permalink":"https://blog.crazykids.tech/posts/git-mirgration/","summary":"git 仓库迁移，一般分为两种情况，从仓库 A 迁移到仓库 B 和从本地直接上传到仓库 B。 从仓库 A 迁移到仓库 B 这种方式比较常见，也有很多 web 端直接支持镜像的方式，但批量的迁移还是要使用命令的，如下： $ git clone --bare http://a.com/crazykids.git $ git push --mirror http://b.com/crazykids.git 从本地直接上传到仓库 B 有的时候需要将本地仓库直接全部 push 到仓库 B，比如仓库 A 真的","title":"Git 仓库迁移"},{"content":"查看所有分支 $ git branch -a 查看远程分支 $ git branch -r 查看本地分支所关联的远程分支 $ git branch -vv 重命名本地分支 $ git branch -m old_branch new_branch 删除远程分支 $ git branch -d -r origin/old_branch $ git push origin :old_branch 推送新的分支 $ git push -u origin new_branch 设置关联 $ git branch --set-upstream-to=origin/branch branch ","permalink":"https://blog.crazykids.tech/posts/git_branch/","summary":"查看所有分支 $ git branch -a 查看远程分支 $ git branch -r 查看本地分支所关联的远程分支 $ git branch -vv 重命名本地分支 $ git branch -m old_branch new_branch 删除远程分支 $ git branch -d -r origin/old_branch $ git push origin :old_branch 推送新的分支 $ git push -u origin new_branch 设置关联 $ git branch --set-upstream-to=origin/branch branch","title":"git 分支操作常用命令"},{"content":"00 安装Hugo 到 Hugo Releases 下载对应的操作系统版本的 Hugo 二进制文件\nMac 下可以直接使用 Homebrew 安装：\n$ brew install hugo 01 生成站点 使用 Hugo 快速生成站点\n$ hugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进入目录：\n$ cd /path/to/site 02 安装主题 到 主题列表 挑选主题，找到相关的 GitHub 地址，创建目录 themes, 把主题 clone 下来\n$ git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 在配置文件中设置主题名字\ntheme: PaperMod 03 配置文件 Hugo 默认使用的 toml 格式的配置文件，也支持 yaml 格式。 详细说明可以参考 Hugo的官方文档\n示例配置 config.yaml 如下\nbaseURL: \u0026#39;https://blog.crazykids.tech/\u0026#39; theme: \u0026#39;PaperMod\u0026#39; languageCode: \u0026#39;zh-cn\u0026#39; languageName: \u0026#39;简体中文\u0026#39; hasCJKLanguage: true title: \u0026#39;CrazyKids\u0026#39;s Blog\u0026#39; paginate: 15 summaryLength: 120 # 文章概览的自字数，默认70 author: name: \u0026#39;duanhongjin\u0026#39; email: \u0026#39;duanhjlt@163.com\u0026#39; link: \u0026#39;https://blog.crazykids.tech/\u0026#39; enableInlineShortcodes: true enableEmoji: true enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true # minifyOutput: true menu: main: - weight: 1 identifier: \u0026#39;post\u0026#39; name: \u0026#39;文章\u0026#39; url: \u0026#39;/\u0026#39; - weight: 2 identifier: \u0026#39;tags\u0026#39; name: \u0026#39;标签\u0026#39; url: \u0026#39;/tags/\u0026#39; - weight: 3 identifier: \u0026#39;categories\u0026#39; name: \u0026#39;分类\u0026#39; url: \u0026#39;/categories/\u0026#39; - weight: 4 identifier: \u0026#39;about\u0026#39; name: \u0026#39;关于\u0026#39; url: \u0026#39;/about/\u0026#39; outputs: home: - HTML - RSS - JSON params: env: production # to enable google analytics, opengraph, twitter-cards and schema. author: duanhongjin defaultTheme: auto # defaultTheme: light or dark disableThemeToggle: false DateFormat: \u0026#34;2006-01-02\u0026#34; ShowShareButtons: true ShowReadingTime: true # disableSpecialistPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true hideFooter: false # 隐藏页脚 ShowWordCounts: true VisitCount: true ShowLastMod: true #显示文章更新时间 ShowToc: true # 显示目录 TocOpen: true # 自动展开目录 extendCodeBackground: false # 代码块是否自动横向展开 comments: true socialIcons: - name: github url: \u0026#34;https://github.com/duanhjlt\u0026#34; - name: RSS url: \u0026#34;index.xml\u0026#34; cover: hidden: false # hide everywhere but not in structured data hiddenInList: false # hide on list pages and home hiddenInSingle: false # hide on single page editPost: URL: \u0026#34;https://github.com/duanhjlt/blog/tree/main/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link markup: highlight: noClasses: false 04 启动博客 $ hugo server -D 本地预览，本地预览网址为 http://localhost:1313\n$ hugo -F --cleanDestinationDir 生成全新的 public 文件夹，这个文件夹可以部署到云服务器上\n05 写文章 $ hugo new new-post.md hugo 会在 content 目录下生成\u0026quot;new-post.md\u0026quot;名字的文件，所有的文章都会放到 content 目录下\n如何自己定义的子目录，如 posts，可以使用命令\n$ hugo new posts/new-post.md 06 文章默认配置 生成文章内部文件头部配置信息包括一些文章名称，时间之类的信息，可以写到 archetypes/default.md 中做为模版，这样生成文章时会自动添加模版里的配置\n示例配置如下:\n--- keywords: [] title: \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date: {{ .Date }} lastmod: {{ .Date }} draft: false description: author: \u0026#39;duanhongjin\u0026#39; tags: [] categories: [] tocLevels: [\u0026#34;h2\u0026#34;, \u0026#34;h3\u0026#34;, \u0026#34;h4\u0026#34;] comments: true # 本页面是否显示评论 reward: true # 打赏 showToc: true # 显示目录 TocOpen: true # 自动展开目录 hidemeta: false # 是否隐藏文章的元信息，如发布日期、作者等 disableShare: true # 底部不显示分享栏 showbreadcrumbs: true #顶部显示路径 --- 07 部署到GitHub Pages 在 GitHub 上创建仓库，名字可以是 duanhjlt.github.io，也可以是其他的，在 GitHub Pages 进行设置即可\n如果想使用自己的域名，如本站域名 blog.crazykids.tech，可以\n在 dns 增加 blog 到 duanhjlt.gihub.io. 的 CNAME 配置项 在 GitHub 的仓库中增加 CNAME 文件，内容为 blog.crazykids.tech 将 public 文件夹做为 GitHub Pages 的本地仓库，每次生成后，推送到 GitHub 上，GitHub Pages 就会自动部署了\n","permalink":"https://blog.crazykids.tech/posts/hugo-site/","summary":"00 安装Hugo 到 Hugo Releases 下载对应的操作系统版本的 Hugo 二进制文件 Mac 下可以直接使用 Homebrew 安装： $ brew install hugo 01 生成站点 使用 Hugo 快速生成站点 $ hugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进入目录： $ cd /path/to/site 02 安装主题 到 主题列表 挑选主题，找到相关的 GitHub 地址，创建目录 themes, 把主题 clone 下来 $ git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 在配置文件中设置主题名字 theme:","title":"Hugo + Github Pages 建站"},{"content":"中年 iOS/macos 开发\nMemora - 让阅读与记忆更优雅: 一个“Read it later” 和 “笔记” 工具。 Black Screen: 黑色力量的终极目的地, 简约和优雅是迷人视觉体验的核心。 联系方式 E-mail: duanhjlt{at}gmail.com Github: duan0120 X: @alexander_duan ","permalink":"https://blog.crazykids.tech/about/","summary":"中年 iOS/macos 开发 Memora - 让阅读与记忆更优雅: 一个“Read it later” 和 “笔记” 工具。 Black Screen: 黑色力量的终极目的地, 简约和优雅是迷人视觉体验的核心。 联系方式 E-mail: duanhjlt{at}gmail.com Github: duan0120 X: @alexander_duan","title":"简介"}]